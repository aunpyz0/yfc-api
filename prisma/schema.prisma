// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Staff {
  id              Int       @id @default(autoincrement())
  code            String
  firstname       String
  lastname        String
  email           String    @unique
  password        String
  role            Role      @default(STAFF)
  refreshToken    String?
  giveReceives    Give[]
}

enum Role {
  STAFF
  ACCOUNTANT
}

model Give {
  id                    Int           @id @default(autoincrement())
  supporterId           Int
  supporter             Supporter     @relation(fields: [supporterId], references: [id])
  receiverId            Int
  receiver              Staff         @relation(fields: [receiverId], references: [id])
  receiveDate           DateTime      @default(now())
  amount                Float
  evidence              String?
  paymentType           PaymentType   @default(TRANSFER)
  transferDetail        TransferDetail?
  chequeDetail          ChequeDetail?
  receipts              Receipt[]
}

enum PaymentType {
  TRANSFER
  CHEQUE
}

model TransferDetail {
  id                    Int           @id @default(autoincrement())
  giveId                Int           @unique
  give                  Give          @relation(fields: [giveId], references: [id])
  transferDate          DateTime
  transferFromBankId    Int
  transferFromBank      Bank          @relation(fields: [transferFromBankId], references: [id])
  transferToBankId      Int
  transferToBank        YFCBank       @relation(fields: [transferToBankId], references: [id])
}

model Bank {
  id                Int    @id @default(autoincrement())
  name              String
  transfers         TransferDetail[]
  cheques           ChequeDetail[]  
}

model YFCBank {
  id                Int @id @default(autoincrement())
  name              String
  accountNo         String
  transfers         TransferDetail[]
}

model ChequeDetail {
  id                    Int           @id @default(autoincrement())
  giveId                Int           @unique
  give                  Give          @relation(fields: [giveId], references: [id])
  chequeBankId          Int
  chequeBank            Bank          @relation(fields: [chequeBankId], references: [id])
  chequeBankBranch      String
  chequeNo              String
  chequeDate            DateTime
}

model Receipt {
  id              Int         @id @default(autoincrement())
  giveId          Int         
  give            Give        @relation(fields: [giveId], references: [id])
  supporterId     Int
  supporter       Supporter   @relation(fields: [supporterId], references: [id])
  amount          Float
  purposeId       Int
  purpose         Purpose     @relation(fields: [purposeId], references: [id])
  expressNo       String?
}

model Purpose {
  id            Int       @id @default(autoincrement())
  name          String
  receipts      Receipt[]
}

model Supporter {
  id          Int       @id @default(autoincrement())
  code        String
  firstname   String
  lastname    String
  gives       Give[]
  receipts    Receipt[]
}
